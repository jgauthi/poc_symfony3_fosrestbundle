<?php
namespace App\Repository;

use App\Entity\Advert;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;
use Doctrine\ORM\{Query, QueryBuilder};

/**
 * AdvertRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Advert::class);
    }

    public function queryRecentActive(): Query
    {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.image', 'img')
            ->addSelect('img')
            ->leftJoin('a.categories', 'cat')
            ->addSelect('cat')
            ->where('a.archived = :archived')
            ->setParameter('archived', false)
            ->orderBy('a.date', 'DESC')
            ->getQuery();

        return $query;
    }

    /**
     * @param int $limit
     *
     * @return array
     */
    public function getLastAdverts(int $limit = 5): array
    {
        $query = $this->createQueryBuilder('advert')
            ->orderBy('advert.date', 'DESC')
            ->where('advert.archived = :archived')
            ->setParameter('archived', false)
            ->setMaxResults($limit)
            ->getQuery();

        $result = $query->getResult();

        return $result;
    }

    /**
     * Equivalent findAll();.
     *
     * @param int|null $limit
     *
     * @return array
     */
    public function myFindALl(?int $limit = null): array
    {
//        $queryBuilder = $this->_em->createQueryBuilder()
//            ->select('advert')
//            ->from($this->_entityName, 'advert');

        $queryBuilder = $this
            ->createQueryBuilder('advert')
            ->where('advert.archived = :archived')
            ->setParameter('archived', false);

        if (!empty($limit)) {
            $queryBuilder->setMaxResults($limit);
        }

        $query = $queryBuilder->getQuery();
        $result = $query->getResult();

        return $result;
    }

    /**
     * @param int $id
     *
     * @throws \Exception
     *
     * @return Advert|null
     */
    public function myFindOne(int $id): ?advert
    {
        $qb = $this->createQueryBuilder('advert');
        $qb->where('advert.id = :id')->setParameter('id', $id);
        $this->whereCurrentYear($qb);

        $result = $qb->getQuery()->getResult();

        return !empty($result[0]) ? $result[0] : null;
    }

    /**
     * @param string $author
     * @param int    $year
     *
     * @return array
     */
    public function findByAuthorAndYear(string $author, int $year): array
    {
        $qb = $this->createQueryBuilder('advert');
        $qb
            ->where('advert.author = :author')
            ->setParameter('author', $author)
            ->andWhere('advert.date < :year')
            ->andWhere('advert.archived = :archived')
            ->setParameters(['year' => $year, 'archived' => false])
            ->orderBy('advert.date', 'DESC');

        return $qb->getQuery()->getResult();
    }

    /**
     * @param QueryBuilder $qb
     *
     * @throws \Exception
     */
    public function whereCurrentYear(QueryBuilder $qb): void
    {
        $qb
            ->andWhere('advert.date BETWEEN :start AND :end')
            ->setParameter('start', new \DateTime(date('Y').'-01-01'))
            ->setParameter('end', new \DateTime(date('Y').'-12-31'));
    }

    /**
     * @return array
     */
    public function getAdvertWithApplications(): array
    {
        $db = $this->createQueryBuilder('advert')
            ->innerJoin('advert.applications', 'app')
            ->addSelect('app')
            ->where('advert.archived = :archived')
            ->setParameter('archived', false);

        /* DQL Version :
            SELECT *
            FROM Advert advert
            LEFT JOIN Application app ON (app.advert_id = advert.id AND YEAR(app.date) >= 2013)
            WHERE advert.archived = 0
        */

        return $db->getQuery()->getResult();
    }

    /**
     * @param array $categoryNames
     *
     * @return array
     */
    public function getAdvertWithCategories(array $categoryNames): array
    {
        $db = $this->createQueryBuilder('advert')
            ->innerJoin('advert.categories', 'cat', 'WITH', 'cat.id IN (:cat)')
            ->setParameter('cat', $categoryNames)
            ->where('advert.archived = :archived')
            ->setParameter('archived', false);

        // Methode alternative IN
        // $qb->where($qb->expr()->in('c.name', $categoryNames));

        $query = $db->getQuery();
        $result = $query->getResult();

        return $result;
    }

    /**
     * @param int $id
     *
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     *
     * @return Advert
     */
    public function myFindDQL(int $id): advert
    {
        $query = $this->_em->createQuery('SELECT advert FROM App:Advert advert WHERE advert.id = :id');
        $query->setParameter('id', $id);

        // Utilisation de getSingleResult car la requête ne doit retourner qu'un seul résultat
        return $query->getSingleResult();
    }
}
